Object Oriented Programming

- [ ] 객체

class Animal {
}

public class Sample {
    public static void main(String[] args) {
    }
}

클래스로 객체를 생성할 수 있다.

class Animal {
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
    }
}

객체생성의 code.
new는 객체를 생성할 떄 사용함

- [ ] 인스턴스

클래스에의해 만들어진 객체
위에코드에서 Cat은 Animal의 instance이다.

- [ ] 객체변수

클래스에 선언된 변수

class Animal {
    String name;
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
    }
}

객체변수에 접근

class Animal {
    String name;
}

public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        System.out.println(cat.name);
    }
}

- [ ] 메서드
클래스내에 구현된 함수
class Animal {
    String name;

    public void setName(String name) {
        this.name = name;
    }
}

setName이 메서드이다.

호출하는 방법

메서드 사용할려면
public class Sample {
    public static void main(String[] args) {
        Animal cat = new Animal();
        cat.setName("boby");  // 메서드 호출
        System.out.println(cat.name);
    }
}

여기서 this는 애니멀 클래스에 의해 생성된 인스턴스를 지칭함.
클래스는 그냥 틀임

- [ ] 객체변수는 공유되지 않는다.

같은 클래스로 생성된 인스턴스들은 각자 다른 객체이다.
즉 결과를 공유하지 않는다.

- [ ] 메서드를 사용하는 이유

똑같은 내용을 반복해서 사용하지 않기 위해

- [ ] 매개변수와 인수

매개변수:	메서드에 입력으로 전달된 값을 받는 변수
인수: 메서드를 호출할 떄 전달하는 입력값

메서드의 입력값과 리턴값
메서드는 들어온 입력값을 가지고 어떤 처리를 하여 적절한 리턴값을 돌려주는 블랙박스와 같다.
입력값 ---> 메서드(블랙박스) ----> 리턴값

메서드를 빠져나가고 싶으면 값없이 return 을 하면 됨

- [ ] Call by value

값에의한 호출
메서드에 값을 넘기는 것과 객체를 전달하는건 다르다.
메서드의 입력으로 객체를 전달받는 경우에는 메서드가 입력받은 객체를
그대로 사용, 객체의 속성값들 변경하면 변경된 속성값이 유지된다.

- [ ] 상속

extends라는 키워드를 통해 상속할 수 있다.
상속받은 클래스를 사용할 수있다.
상속받아 부모 클래스의 기능을 확장하는 식으로 사용도 가능

- [ ] IS-A관계

dog란 클래스가 animal을 상속받았으면 dog는 animal의 하위 관계이다.
즉, 개는 동물이다와 같은 논리. 이러한 논리가 IS-A 관게이다

이러한 특성으로 부모클래스는 자식생성자로 생성이 가능하다.
그러나 자식클래스는 부모 생성자로 생성이 불가능하다.

- [ ] 메서드 오버라이딩
자식 클래스는 동일한 메서드명을 선언해 오버라이딩이 가능

- [ ] 메서드 오버로딩
동일한 메서드여도 매개변수의 차이에 따라 다른 메서드로 활용될 수 있다.

- [ ] 다중상속
자바는 다중상속을 지원하지 않는다.

- [ ] 생성자

생성자로 클래스생성에 필요한 값들을 강제할 수 있다.
생성자는 클래스명과 동일하게 선언
예시
Class kiminonama{
	kiminonama(String name){
		this.setName(name);
	}
}
생성자 규칙
1.클래스명과 메서드명이 동일하다
2.리턴타입을 정의하지 안는다.

- [ ] 디폴트 생성자

생성자를 만들고 아무내용도 기입하지 않으면
디폴트 생성자가 됨

- [ ] 생성자 오버로딩
생성자도 오버로딩이 가능하다.
매개변수의 타입, 갯수를 바꿔 오버로딩

인터페이스

인터페이스는 초보킬러다.
interface라는 별도의 키워드로 생성
인터페이스는 클래스와 마찬가지로 단독파일로 저장하는거싱 일반적
인터페이스는 inmplements라는 키워드를 사용해 구현

클래스에 자료형의타입으로 사용을 할 수있다.
인터페이스에 메서드를 구현하고
동일한 메서드를 실제는 클래스에 구현해 사용

물리적 세계	Java
컴퓨터	관리class
usb포트	Interface
하드디스크	하위 class

- [ ] 디폴트 메서드
원래는 없지만 java8부터 구현

Interface Predator{
	String getFood(); //일반적인 메서드

	default void pirntFood(){
		System.out.prinf(“my food is %s\n”,getFood());
	}

}

- [ ] 스태틱 메서드

스태틱메서드를 사용할 수 있다
인터페이스에 스테틱 메서드를구현하면
인터페이스명.스태틱메서드명 과같이 사용하여 구현할 수있다.

- [ ] 다형성으로 코드구현

interface Predator {
    String getFood();

    default void printFood() {
        System.out.printf("my food is %s\n", getFood());
    }

    int LEG_COUNT = 4;  // 인터페이스 상수

    static int speed() {
        return LEG_COUNT * 30;
    }
}

interface Barkable {
    void bark();
}

interface BarkablePredator extends Predator, Barkable {
}

class Animal {
    String name;

    void setName(String name) {
        this.name = name;
    }
}

class Tiger extends Animal implements Predator, Barkable {
    public String getFood() {
        return "apple";
    }

    public void bark() {
        System.out.println("어흥");
    }
}

class Lion extends Animal implements BarkablePredator {
    public String getFood() {
        return "banana";
    }

    public void bark() {
        System.out.println("으르렁");
    }
}

class ZooKeeper {
    void feed(Predator predator) {
        System.out.println("feed " + predator.getFood());
    }
}

class Bouncer {
    void barkAnimal(Barkable animal) {
        animal.bark();
    }
}

public class Sample {
    public static void main(String[] args) {
        Tiger tiger = new Tiger();
        Lion lion = new Lion();

        Bouncer bouncer = new Bouncer();
        bouncer.barkAnimal(tiger);
        bouncer.barkAnimal(lion);
    }
}

추상클래스

- [ ] 추상클래스는 인터페이스 역활도 하면서 클래스의 기능도 한다.

클래스 앞에 abstract라는 키워드로 생성 가능
메서드 앞에도 abstract를 붙여야함